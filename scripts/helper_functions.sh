#!/bin/bash

# Released under MIT License

# Copyright (c) 2025 Achille MARTIN

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ---- GLOBAL VARIABLES ----

OS_DETECTED="unknown"
OS_DISTRIBUTION_DETECTED="unknown"
OS_DISTRIBUTION_RELEASE_DETECTED="unknown"
OS_DISTRIBUTION_MAJOR_RELEASE_DETECTED="unknown"
OS_ARCHITECTURE_DETECTED="unknown"
OS_PLATFORM_DETECTED="unknown"

IS_OS_PLATFORM_SUPPORTED="unknown"
IS_DISTRIBUTION_MAJOR_RELEASE_SUPPORTED="unknown"

DEFAULT_DOWNLOADS_FOLDER="$HOME/Downloads"
DEFAULT_LOCAL_FOLDER="$HOME/.local"
DEFAULT_BASHRC_PATH="$HOME/.bashrc"

# Maintain a list of minimum supported (distribution) major releases
# for the common OS platforms
# Note: the format of the OS platform string
# is based on the default generated by `get_os_platform_string()`
# helper function, and the major release number must only be one integer
declare -A MIN_SUPPORTED_MAJOR_RELEASE_DICT
MIN_SUPPORTED_MAJOR_RELEASE_DICT["linux_ubuntu_x86_64"]="22"

# ---- HELPER FUNCTIONS ----

# Highlight a need to source changes
# after environment modifications
source_changes() {
    printf "\n/ ! \\ ACTION REQUIRED: Refresh the state of the environment with the following command\n"
    case "$OS_DETECTED" in
        linux)
            printf "➤ source $DEFAULT_BASHRC_PATH\n"
            ;;
        *)
            printf "✗ Not applicable.\n"
            ;;
    esac
}

# Get the unique string describing the OS platform
get_os_platform_string() {
    local delimiter="_"
    local os_platform_string="${OS_DETECTED}${delimiter}${OS_DISTRIBUTION_DETECTED}${delimiter}${OS_ARCHITECTURE_DETECTED}"
    echo "${os_platform_string}"
}

# Get support status of the (distribution) major release
# for the current OS platform:
# * Returns `0` if release is supported
# * Returns a non-zero exit code (`255`) if release is not supported
# * Returns a non-zero exit code (`1`) if there has been an error during execution
get_support_status_for_distribution_major_release() {
    # Make sure that the minimum supported major release has been registered
    # for the OS platform before proceeding
    if [[ -v MIN_SUPPORTED_MAJOR_RELEASE_DICT["$OS_PLATFORM_DETECTED"] ]];
    then
        # Compare the min supported major release
        # with the current OS distribution major release
        # and return a relevant int code
        local min_supported_distrib_major_release="${MIN_SUPPORTED_MAJOR_RELEASE_DICT["$OS_PLATFORM_DETECTED"]}"
        if [[ "$OS_DISTRIBUTION_MAJOR_RELEASE_DETECTED" -ge "$min_supported_distrib_major_release" ]];
        then
            return 0
        else
            return 255
        fi
    else
        printf "ERROR: the minimum supported major release has not been registered\n"
        printf "for the OS platform: ${OS_PLATFORM_DETECTED}\n"
        return 1
    fi
}

# Check OS specifications to determine support
check_os_specifications() {
    if [[ -n "$OSTYPE" ]];
    then
        if [[ "$OSTYPE" =~ linux|Linux|LINUX ]];
        then
            OS_DETECTED="linux"
            local distribution_detected="$(lsb_release -i)"
            if [[ "$distribution_detected" =~ ubuntu|Ubuntu|UBUNTU ]];
            then
                OS_DISTRIBUTION_DETECTED="ubuntu"
                OS_DISTRIBUTION_RELEASE_DETECTED="$(lsb_release -rs)"
                OS_DISTRIBUTION_MAJOR_RELEASE_DETECTED="$(echo $OS_DISTRIBUTION_RELEASE_DETECTED | cut -d '.' -f 1)"
                local architecture_detected="$(uname -i)"
                if [[ "$architecture_detected" =~ x86_64 ]];
                then
                    OS_ARCHITECTURE_DETECTED="x86_64"

                    # Update the OS platform name
                    IS_OS_PLATFORM_SUPPORTED=1
                    OS_PLATFORM_DETECTED="$(get_os_platform_string)"
                    # Check status support for distribution release
                    local get_release_support_cmd="$(get_support_status_for_distribution_major_release)"
                    local get_release_support_cmd_status="$?"
                    if [[ "$get_release_support_cmd_status" -eq 0 ]];
                    then
                        IS_DISTRIBUTION_MAJOR_RELEASE_SUPPORTED=1
                    elif [[ "$get_release_support_cmd_status" -eq 255 ]];
                    then
                        IS_DISTRIBUTION_MAJOR_RELEASE_SUPPORTED=0
                        printf "WARNING: the OS platform is supported,\n"
                        printf "but the distribution major release \`$OS_DISTRIBUTION_MAJOR_RELEASE_DETECTED\` is not supported.\n"
                        printf "The script will adapt its process for unsupported releases,\n"
                        printf "as much as possible.\n"
                    else
                        printf "$get_release_support_cmd\n"
                        printf "ERROR: The OS platform \`$OS_PLATFORM_DETECTED\`is not registered,\n"
                        printf "therefore assumed to not be supported.\n"
                        exit 1
                    fi
                else
                    printf "ERROR: the architecture \`$architecture_detected\` is not supported.\n"
                    print_usage
                    exit 1
                fi
            else
                printf "ERROR: the distribution \`$distribution_detected\` is not supported.\n"
                print_usage
                exit 1
            fi
        else
            printf "ERROR: the current OS \`$OSTYPE\` is not supported.\n"
            print_usage
            exit 1
        fi
    else
        printf "ERROR: the current OS platform cannot be determined.\n"
        printf "Please verify the supported platforms.\n"
        print_usage
        exit 1
    fi
}

